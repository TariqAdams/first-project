// game.js
class MathGame {
    constructor() {
        this.level = 1;
        this.score = 0;
        this.currentAnswer = 0;
        this.questionsAnswered = 0;
        this.questionsPerLevel = 5;
        this.initializeElements();
        this.generateProblem();
    }

    initializeElements() {
        this.levelElement = document.getElementById('level');
        this.scoreElement = document.getElementById('score');
        this.problemElement = document.getElementById('problem');
        this.answerElement = document.getElementById('answer');
        this.progressElement = document.getElementById('progress');
        
        // Add enter key support
        this.answerElement.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.checkAnswer();
            }
        });
    }

    generateProblem() {
        let num1, num2, operation;
        
        switch(this.level) {
            case 1: // Simple addition
                num1 = Math.floor(Math.random() * 10) + 1;
                num2 = Math.floor(Math.random() * 10) + 1;
                operation = '+';
                break;
            case 2: // Addition and subtraction
                num1 = Math.floor(Math.random() * 20) + 1;
                num2 = Math.floor(Math.random() * 20) + 1;
                operation = Math.random() < 0.5 ? '+' : '-';
                if (operation === '-') {
                    [num1, num2] = [Math.max(num1, num2), Math.min(num1, num2)];
                }
                break;
            case 3: // Multiplication
                num1 = Math.floor(Math.random() * 12) + 1;
                num2 = Math.floor(Math.random() * 12) + 1;
                operation = '×';
                break;
        }

        this.problemElement.textContent = `${num1} ${operation} ${num2} = ?`;

        switch(operation) {
            case '+': this.currentAnswer = num1 + num2; break;
            case '-': this.currentAnswer = num1 - num2; break;
            case '×': this.currentAnswer = num1 * num2; break;
        }
    }

    updateProgress() {
        const progress = (this.questionsAnswered % this.questionsPerLevel) * (100 / this.questionsPerLevel);
        this.progressElement.style.width = `${progress}%`;
    }

    checkAnswer() {
        const userAnswer = parseInt(this.answerElement.value);
        if (isNaN(userAnswer)) return;

        if (userAnswer === this.currentAnswer) {
            this.score += this.level * 10;
            this.questionsAnswered++;
            this.scoreElement.textContent = this.score;
            
            if (this.questionsAnswered % this.questionsPerLevel === 0) {
                if (this.level < 3) {
                    this.level++;
                    this.levelElement.textContent = this.level;
                    alert(`Congratulations! You've reached level ${this.level}!`);
                }
            }
            
            this.updateProgress();
        } else {
            alert('Try again!');
        }
        
        this.answerElement.value = '';
        this.generateProblem();
    }
}

// Initialize game when page loads
window.onload = () => {
    window.game = new MathGame();
};

let currentAnswer;
let score = 0;
let level = 1;

// Function to get problem from Lambda
async function getProblem() {
    try {
        const response = await fetch('YOUR_LAMBDA_FUNCTION_URL', {
            method: 'POST',
            body: JSON.stringify({ level: level })
        });
        const data = await response.json();
        const problemData = JSON.parse(data.body);
        
        document.getElementById('problem').textContent = problemData.problem;
        currentAnswer = problemData.answer;
    } catch (error) {
        console.error('Error fetching problem:', error);
    }
}

// Function to check answer
function checkAnswer() {
    const userAnswer = parseInt(document.getElementById('answer').value);
    
    if (userAnswer === currentAnswer) {
        score += 10;
        document.getElementById('score').textContent = score;
        
        // Level up every 50 points
        if (score % 50 === 0) {
            level = Math.min(3, level + 1);
            document.getElementById('level').textContent = level;
        }
        
        alert('Correct!');
    } else {
        alert('Try again!');
    }
    
    // Clear input and get new problem
    document.getElementById('answer').value = '';
    getProblem();
}

// Initialize the game
window.onload = getProblem;
